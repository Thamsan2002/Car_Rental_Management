@model Car_Rental_Management.ViewModel.BookingViewmodel
@{
    ViewData["Title"] = "Book Car";
}

<h2>Booking for @Model.CarMake @Model.CarModel</h2>

<div class="row">
    <div class="col-md-6">
        <img src="@Model.CarImage" class="img-fluid mb-3" />
        <p><strong>Color:</strong> @Model.CarColor</p>
        <p><strong>Price/Day:</strong> LKR @Model.CarPricePerDay:N0</p>

        @* Show driver availability *@
        @if (!string.IsNullOrEmpty(Model.DriverName))
        {
            <p><strong>Available Driver:</strong> @Model.DriverName</p>
        }
        else
        {
            <p class="text-danger"><strong>No driver available</strong></p>
        }
    </div>

    <div class="col-md-6">
        <form asp-action="Create" method="post">
            <input type="hidden" asp-for="CustomerId" />
            <input type="hidden" asp-for="CarId" />
            <input type="hidden" asp-for="CarMake" />
            <input type="hidden" asp-for="CarModel" />
            <input type="hidden" asp-for="CarColor" />
            <input type="hidden" asp-for="CarImage" />
            <input type="hidden" asp-for="CarPricePerDay" />
            <input type="hidden" asp-for="TotalPrice" id="hiddenTotalPrice" />
            <input type="hidden" asp-for="DriverFee" id="hiddenDriverFee" />

            <!-- Hidden Booked Periods -->
            @for (int i = 0; i < Model.BookedPeriods?.Count; i++)
            {
                <input type="hidden" name="BookedPeriods[@i].Start" value="@Model.BookedPeriods[i].Start" />
                <input type="hidden" name="BookedPeriods[@i].End" value="@Model.BookedPeriods[i].End" />
            }

            <div class="mb-3">
                <label>Booking Type</label><br />
                <input type="radio" asp-for="BookingType" value="WithoutDriver" checked onchange="toggleDriver()" /> Without Driver
                <input type="radio"
                       asp-for="BookingType"
                       value="WithDriver"
                       onchange="toggleDriver()"
                       disabled="@(Model.DriverId == null)" /> With Driver
                <span asp-validation-for="BookingType" class="text-danger"></span>
            </div>

            <!-- Hidden driver fields -->
            <input type="hidden" name="DriverId" id="driverId" value="" />
            <input type="hidden" name="DriverName" id="driverName" value="" />

            <!-- Show selected driver dynamically -->
            <p id="selectedDriver" class="text-info"></p>

            <div class="mb-3">
                <label>Start Date</label>
                <input asp-for="StartDate" type="text" class="form-control" id="startDate" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label>End Date</label>
                <input asp-for="EndDate" type="text" class="form-control" id="endDate" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label>Car Fee / Day</label>
                <input type="text" class="form-control" id="carFee" value="LKR @Model.CarPricePerDay" readonly />
            </div>

            <div class="mb-3" id="driverFeeDiv" style="display:none;">
                <label>Driver Fee / Day</label>
                <input type="text" class="form-control" id="driverFee" value="LKR 2000" readonly />
            </div>

            <div class="mb-3">
                <label>Total Price</label>
                <input type="text" class="form-control" id="totalPrice" readonly />
                <input type="hidden" asp-for="TotalPrice" id="hiddenTotalPrice" />
            </div>

            <button type="submit" class="btn btn-success">Confirm Booking</button>
            <a asp-action="Index" asp-controller="Home" class="btn btn-secondary">Cancel</a>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <!-- Flatpickr -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
        // Booked periods from backend
        const bookedPeriods = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BookedPeriods));

        // Convert periods into ranges for Flatpickr
        const disabledRanges = bookedPeriods
            .filter(p => p.Start !== "0001-01-01" && p.End !== "0001-01-01") // filter invalid rows
            .map(p => {
                return { from: p.Start, to: p.End };
            });

        // Initialize Flatpickr for Start/End dates
        flatpickr("#startDate", {
            dateFormat: "Y-m-d",
            minDate: "today",
            disable: disabledRanges,
            onChange: function () {
                calculateTotal();
            }
        });

        flatpickr("#endDate", {
            dateFormat: "Y-m-d",
            minDate: "today",
            disable: disabledRanges,
            onChange: function () {
                calculateTotal();
            }
        });

        function calculateTotal() {
            const carPrice = @Model.CarPricePerDay;
            const driverPrice = 2000;

            const startDateVal = document.getElementById('startDate').value;
            const endDateVal = document.getElementById('endDate').value;
            const startDate = startDateVal ? new Date(startDateVal) : null;
            const endDate = endDateVal ? new Date(endDateVal) : null;

            let totalDays = 0;
            if (startDate && endDate && endDate > startDate) {
                totalDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
            }

            let total = 0;
            const withDriver = document.querySelector('input[value="WithDriver"]').checked;
            if (withDriver) {
                total = (carPrice * totalDays) + (driverPrice * totalDays);
            } else {
                total = carPrice * totalDays;
            }

            document.getElementById('totalPrice').value =
                "LKR " + total.toLocaleString('en-US', { minimumFractionDigits: 0 });

            document.getElementById('hiddenTotalPrice').value = total;
        }

        function toggleDriver() {
            const withDriver = document.querySelector('input[value="WithDriver"]').checked;

            if (withDriver && "@Model.DriverId") {
                document.getElementById("driverId").value = "@Model.DriverId";
                document.getElementById("driverName").value = "@Model.DriverName";
                document.getElementById("selectedDriver").innerText = "Driver: @Model.DriverName";
                document.getElementById('driverFeeDiv').style.display = 'block';
            } else {
                document.getElementById("driverId").value = "";
                document.getElementById("driverName").value = "";
                document.getElementById("selectedDriver").innerText = "";
                document.getElementById('driverFeeDiv').style.display = 'none';
            }

            calculateTotal();
        }

        document.addEventListener('DOMContentLoaded', () => {
            toggleDriver();
            calculateTotal();
        });
    </script>
}
